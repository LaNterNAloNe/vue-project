{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ElMessage } from 'element-plus';\nimport { ref } from 'vue';\nasync function getUserIP() {\n  try {\n    const res = await fetch('https://api.ipify.org?format=json');\n    const data = await res.json();\n    console.log('用户 IP:', data.ip);\n    return data.ip;\n  } catch (error) {\n    console.error('获取 IP 失败:', error);\n    return null;\n  }\n}\nexport default {\n  name: 'App',\n  setup() {\n    const fileInput = ref(null);\n    const File = ref(null);\n    const isProcessing = ref(false);\n    const isTranslated = ref(false);\n    const downloadJSONoffset = ref(false);\n\n    // Placeholder for subtitle data\n    const original_subtitles = ref([\n      // Example data structure\n      // { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\n    ]);\n    const translated_subtitles = ref([\n      // Example data structure\n      // { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\n      // { timestamp: '00:00:04,000 --> 00:00:06,789', original: '今天天气真好。', translated: 'The weather is great today.' }\n    ]);\n\n    /****************************************\r\n    INFO: 触发文件上传的函数\r\n    ****************************************/\n    const triggerFileUpload = () => {\n      fileInput.value.click();\n    };\n    const handleDrop = event => {\n      const file = event.dataTransfer.files[0];\n      const fileName = file.name.toLowerCase();\n      if (file && fileName.endsWith('.srt')) {\n        File.value = file;\n        readSubtitleFile(file); // 👈 添加解析方法\n      } else {\n        ElMessage.warning('请拖入一个有效的文本或字幕文件！');\n      }\n    };\n    const handleFileChange = event => {\n      const file = event.target.files[0];\n      if (!file) return;\n      const fileName = file.name.toLowerCase();\n      if (fileName.endsWith('.srt')) {\n        File.value = file;\n        readSubtitleFile(file); // 👈 添加解析方法\n      } else {\n        ElMessage.warning('请选择一个有效的字幕文件（.srt）！');\n      }\n    };\n\n    /****************************************\r\n    INFO: 解析字幕文件的函数\r\n    ****************************************/\n    const readSubtitleFile = file => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const content = reader.result;\n        original_subtitles.value = parseSRT(content); // 👈 解析为结构化数据\n      };\n      reader.readAsText(file);\n    };\n    const parseSRT = text => {\n      // 去除 BOM\n      if (text.charCodeAt(0) === 0xFEFF) {\n        text = text.slice(1);\n      }\n\n      // 标准化换行符\n      const normalizedText = text.replace(/\\r\\n|\\r/g, '\\n');\n      // 按行分割并清理\n      const lines = normalizedText.split('\\n').map(line => line.trim()).filter(line => line !== '');\n      const subtitles = [];\n      let i = 0;\n      while (i < lines.length) {\n        // 判断是否是字幕编号\n        if (/^\\d+$/.test(lines[i])) {\n          const index = lines[i];\n          const timestamp = lines[i + 1];\n\n          // 判断时间戳是否合法\n          if (/-->/i.test(timestamp)) {\n            let contentLines = [];\n            let j = i + 2;\n\n            // 收集内容行，直到遇到下一个编号或文件结束\n            while (j < lines.length && !/^\\d+$/.test(lines[j])) {\n              contentLines.push(lines[j]);\n              j++;\n            }\n            const original = contentLines[0] || '';\n            const translated = contentLines[1] || '';\n            subtitles.push({\n              index,\n              timestamp,\n              original,\n              translated,\n              allContent: contentLines // 可选：保留所有内容行\n            });\n            i = j; // 跳到下一块字幕\n          } else {\n            i++; // 时间戳不合法，跳过\n          }\n        } else {\n          i++; // 非编号行，跳过\n        }\n      }\n      return subtitles;\n    };\n\n    /****************************************\r\n    INFO: 处理文件的函数\r\n    ****************************************/\n    // const startProcessing = () => {\n    //   if (!File.value) {\n    //     ElMessage.warning('请先选择一个文件！');\n    //     return;\n    //   }\n    //   isProcessing.value = true;\n    //   console.log('开始处理文件:', File.value.name);\n\n    //   // 获取用户IP和时间戳并生成字段名\n    //   getUserIP().then(ip => {\n    //     const now = new Date();\n    //     const timestamp = now.toLocaleString('sv').replace(' ', '-').replace(/:/g, '');\n    //     const fieldName = `subtitle_${ip}_${timestamp}`;\n    //     console.log('字段名:', fieldName);\n    //     const formData = new FormData();\n    //     formData.append(fieldName, File); // 👈 动态字段名\n    //     fetch('http://localhost:8080/upload-subtitle', {\n    //         method: 'POST',\n    //         body: formData\n    //     });\n    //     // 等待与后端的链接\n    //   });\n\n    //   // --- API Integration Placeholder ---\n    //   // 1. Upload file to server\n    //   // 2. Poll for processing status\n    //   // 3. On success, fetch subtitle data\n    //   // ------------------------------------\n\n    //   // Simulate API call and receiving data\n    //   setTimeout(() => {\n    //     translated_subtitles.value = [\n    //       { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\n    //       { timestamp: '00:00:04,000 --> 00:00:06,789', original: '今天天气真好。', translated: 'The weather is great today.' },\n    //       { timestamp: '00:00:07,100 --> 00:00:09,500', original: '我们去公园吧。', translated: \"Let's go to the park.\" },\n    //       { timestamp: '00:00:10,000 --> 00:00:12,000', original: '再见！', translated: 'Goodbye!' },\n    //       { timestamp: '00:00:13,000 --> 00:00:15,000', original: '谢谢！', translated: 'Thanks!' },\n    //     ];\n    //     isProcessing.value = false;\n    //     isTranslated.value = true;\n    //     ElMessage.success('处理完成');\n    //   }, 3000); // Simulate a 3-second processing time\n    // };\n\n    const startProcessing = () => {\n      if (!File.value) {\n        ElMessage.warning('请先选择一个文件！');\n        return;\n      }\n      isProcessing.value = true;\n      console.log('开始处理文件:', File.value.name);\n      handleResponse(); // 👈 交给模块化函数处理\n    };\n    const handleResponse = async () => {\n      try {\n        const fieldName = await generateFieldName();\n        const uploadRes = await uploadFile(fieldName, File.value);\n        if (!uploadRes.ok) {\n          ElMessage.error('上传失败，请重试');\n          isProcessing.value = false;\n          return;\n        }\n\n        // 等待后端处理完成（可以用轮询或 WebSocket）\n        const result = await pollForResult(); // 👈 真实获取后端返回数据\n        translated_subtitles.value = result.subtitles;\n        isTranslated.value = true;\n        ElMessage.success('处理完成');\n      } catch (err) {\n        ElMessage.error(`处理失败: ${err.message}`);\n      } finally {\n        isProcessing.value = false;\n      }\n    };\n    const generateFieldName = async () => {\n      const ip = await getUserIP();\n      const timestamp = new Date().toLocaleString('sv').replace(' ', '-').replace(/:/g, '');\n      return `subtitle_${ip}_${timestamp}`;\n    };\n    const uploadFile = async (fieldName, file) => {\n      const formData = new FormData();\n      formData.append(fieldName, file);\n      // return fetch('http://localhost:8080/upload-subtitle', {\n      //   method: 'POST',\n      //   body: formData\n      // });\n      return {\n        ok: true // 模拟成功响应\n      };\n    };\n    const pollForResult = async () => {\n      // 假设后端提供轮询接口\n      const response = await fetch('http://localhost:8080/subtitle-result');\n      if (!response.ok) throw new Error('后端处理失败');\n      return response.json(); // 返回字幕数据\n    };\n\n    /****************************************\r\n    INFO: 转换为SRT格式的函数\r\n    ****************************************/\n\n    const convertToSRT = subtitlesArray => {\n      return subtitlesArray.map((item, index) => {\n        return `${index + 1}\\n${item.timestamp}\\n${item.original}\\n${item.translated}\\n\\n`;\n      }).join('');\n    };\n    const downloadSRT = () => {\n      const srtContent = convertToSRT(translated_subtitles.value);\n      const blob = new Blob([srtContent], {\n        type: 'text/plain;charset=plaintext'\n      });\n      const url = URL.createObjectURL(blob);\n\n      // 获取文件名称\n      const now = new Date();\n      const year = now.getFullYear();\n      const month = String(now.getMonth() + 1).padStart(2, '0'); // 月份从 0 开始\n      const day = String(now.getDate()).padStart(2, '0');\n      const hour = String(now.getHours()).padStart(2, '0');\n      const minute = String(now.getMinutes()).padStart(2, '0');\n      const second = String(now.getSeconds()).padStart(2, '0');\n      const downloadFileName = `subtitles-${year}${month}${day}-${hour}${minute}${second}.srt`;\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = downloadFileName;\n      a.click();\n      URL.revokeObjectURL(url);\n    };\n    const downloadJSON = data => {\n      if (!data || data.length === 0) {\n        ElMessage.error('没有数据可下载');\n        return;\n      }\n      downloadJSONoffset.value = true; // 设置下载状态为 true\n\n      const jsonContent = JSON.stringify(data, null, 2);\n      const blob = new Blob([jsonContent], {\n        type: 'application/json;charset=utf-8'\n      });\n      const url = URL.createObjectURL(blob);\n      const filename = `subtitles-${new Date().toISOString().replace(/[:.]/g, '-')}-as-json.json`; // 使用 ISO 格式的时间戳作为文件名\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      a.click();\n      setTimeout(() => {\n        downloadJSONoffset.value = false; // 下载完成后重置状态\n      }, 1000); // 1秒后重置状态\n      URL.revokeObjectURL(url);\n    };\n    return {\n      fileInput,\n      File,\n      isProcessing,\n      original_subtitles,\n      translated_subtitles,\n      isTranslated,\n      downloadJSONoffset,\n      triggerFileUpload,\n      handleFileChange,\n      readSubtitleFile,\n      handleDrop,\n      startProcessing,\n      parseSRT,\n      handleResponse,\n      generateFieldName,\n      uploadFile,\n      pollForResult,\n      convertToSRT,\n      downloadSRT,\n      downloadJSON\n    };\n    // 这表示：你希望这些变量和方法可以在 <template> 中被访问和使用。\n    // 实际上你使用script setup 时，所有在 setup 函数中定义的变量和方法都会自动暴露到模板中。\n  }\n};","map":{"version":3,"names":["ElMessage","ref","getUserIP","res","fetch","data","json","console","log","ip","error","name","setup","fileInput","File","isProcessing","isTranslated","downloadJSONoffset","original_subtitles","translated_subtitles","triggerFileUpload","value","click","handleDrop","event","file","dataTransfer","files","fileName","toLowerCase","endsWith","readSubtitleFile","warning","handleFileChange","target","reader","FileReader","onload","content","result","parseSRT","readAsText","text","charCodeAt","slice","normalizedText","replace","lines","split","map","line","trim","filter","subtitles","i","length","test","index","timestamp","contentLines","j","push","original","translated","allContent","startProcessing","handleResponse","fieldName","generateFieldName","uploadRes","uploadFile","ok","pollForResult","success","err","message","Date","toLocaleString","formData","FormData","append","response","Error","convertToSRT","subtitlesArray","item","join","downloadSRT","srtContent","blob","Blob","type","url","URL","createObjectURL","now","year","getFullYear","month","String","getMonth","padStart","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","downloadFileName","a","document","createElement","href","download","revokeObjectURL","downloadJSON","jsonContent","JSON","stringify","filename","toISOString","setTimeout"],"sources":["C:\\NewFiles\\Vue3\\vue-project\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"app-container\">\r\n    <header class=\"app-header\">\r\n      <h1>中国网络微短剧英译智能体</h1>\r\n      <p class=\"subtitle\">AI-Powered Chinese Short Drama Translation Agent</p>\r\n    </header>\r\n\r\n    <main class=\"main-content\">\r\n      <section class=\"upload-section\">\r\n        <div class=\"upload-box\" @dragover.prevent @drop.prevent=\"handleDrop\" @click=\"triggerFileUpload\">\r\n          <input type=\"file\" id=\"file-upload\" @change=\"handleFileChange\" accept=\".srt\" ref=\"fileInput\" style=\"display: none;\">\r\n          \r\n          <div v-if=\"!File\" class=\"upload-prompt\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"upload-icon\"><path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path><polyline points=\"17 8 12 3 7 8\"></polyline><line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\"></line></svg> <!-- upload icon -->\r\n            <p>将文本或字幕文件拖拽到此处</p>\r\n            <small class=\"file-info\">支持 srt 格式</small>\r\n          </div>\r\n\r\n          <div v-if=\"File\" class=\"file-details\">\r\n            <h4>已选择文件:</h4>\r\n            <p>{{ File.name }}</p>\r\n            <button @click.stop=\"startProcessing\" class=\"process-button\" :disabled=\"isProcessing\">\r\n              {{ isProcessing ? '处理中...' : '开始翻译' }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section class=\"display-section\">\r\n        <!-- 源文件预览 -->\r\n        <h3 class=\"tight-title\">源字幕预览 (Original Subtitle Preview)</h3>\r\n        <div class=\"subtitle-display-container\">\r\n          <div class=\"subtitle-area\">\r\n            <div v-if=\"File === null\" class=\"subtitle-placeholder\"> \r\n              <p>上传的文件或字幕内容将在此显示...</p>\r\n            </div>\r\n            <div v-if=\"File !== null && original_subtitles.length === 0\" class=\"subtitle-placeholder\">\r\n              <p>上传的文件暂无内容</p>\r\n            </div>\r\n\r\n            <ul v-if=\"original_subtitles.length > 0\" class=\"subtitle-list\">\r\n              <li v-for=\"(subtitle, index) in original_subtitles\" :key=\"index\" class=\"subtitle-item\">\r\n                <span class=\"timestamp\">{{ subtitle.timestamp }}</span>\r\n                <p class=\"text-original\" v-html=\"subtitle.original\"></p>\r\n                <p class=\"text-original\" v-if=\"subtitle.translated\">{{ subtitle.translated }}</p>\r\n              </li>\r\n            </ul>\r\n\r\n          </div>\r\n          <button v-if=\"File\" @click=\"downloadJSON(original_subtitles)\" class=\"process-button\" :disabled=\"downloadJSONoffset\">下载原字幕json文件</button>\r\n\r\n        </div>\r\n\r\n        <!-- 翻译字幕预览 -->\r\n        <h3 class=\"tight-title\">翻译字幕预览 (Translated Subtitle Preview)</h3>\r\n        <div class=\"subtitle-display-container\">\r\n          <div class=\"subtitle-area\">\r\n\r\n            <div v-if=\"!isTranslated\" class=\"subtitle-placeholder\"> \r\n            <!-- 此处应判断是否完成翻译（翻译结果包含无文本【特殊情况】） -->\r\n              <p>翻译生成的字幕将在此显示...</p>\r\n            </div>\r\n\r\n            <div v-if=\"translated_subtitles.length === 0 && isTranslated\" class=\"subtitle-placeholder\"> \r\n              <p>暂无翻译结果</p>\r\n            </div>\r\n\r\n            <ul v-else class=\"subtitle-list\">\r\n              <li v-for=\"(subtitle, index) in translated_subtitles\" :key=\"index\" class=\"subtitle-item\">\r\n                <span class=\"timestamp\">{{ subtitle.timestamp }}</span>\r\n                <p class=\"text-original\">{{ subtitle.original }}</p>\r\n                <p class=\"text-translated\">{{ subtitle.translated }}</p>\r\n              </li>\r\n            </ul>\r\n\r\n          </div>\r\n          <button v-if=\"isTranslated\" @click=\"downloadSRT(translated_subtitles)\" class=\"process-button\">下载字幕文件</button>\r\n        </div>\r\n      </section>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ElMessage } from 'element-plus';\r\nimport { ref } from 'vue';\r\n\r\nasync function getUserIP() {\r\n  try {\r\n    const res = await fetch('https://api.ipify.org?format=json');\r\n    const data = await res.json();\r\n    console.log('用户 IP:', data.ip);\r\n    return data.ip;\r\n  } catch (error) {\r\n    console.error('获取 IP 失败:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: 'App',\r\n  setup() {\r\n    const fileInput = ref(null);\r\n    const File = ref(null);\r\n    const isProcessing = ref(false);\r\n    const isTranslated = ref(false);\r\n    const downloadJSONoffset = ref(false);\r\n    \r\n    // Placeholder for subtitle data\r\n    const original_subtitles = ref([\r\n      // Example data structure\r\n      // { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\r\n    ]);\r\n    const translated_subtitles = ref([\r\n      // Example data structure\r\n      // { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\r\n      // { timestamp: '00:00:04,000 --> 00:00:06,789', original: '今天天气真好。', translated: 'The weather is great today.' }\r\n    ]);\r\n\r\n    /****************************************\r\n    INFO: 触发文件上传的函数\r\n    ****************************************/\r\n    const triggerFileUpload = () => {\r\n      fileInput.value.click();\r\n    };\r\n\r\n    const handleDrop = (event) => {\r\n      const file = event.dataTransfer.files[0];\r\n      const fileName = file.name.toLowerCase();\r\n      if (file && (fileName.endsWith('.srt'))) {\r\n        File.value = file;\r\n        readSubtitleFile(file); // 👈 添加解析方法\r\n      } else {\r\n        ElMessage.warning('请拖入一个有效的文本或字幕文件！');\r\n      }\r\n    };\r\n\r\n    const handleFileChange = (event) => {\r\n      const file = event.target.files[0];\r\n      if (!file) return;\r\n  \r\n      const fileName = file.name.toLowerCase();\r\n      if (fileName.endsWith('.srt')){\r\n        File.value = file;\r\n        readSubtitleFile(file); // 👈 添加解析方法\r\n      } else {\r\n        ElMessage.warning('请选择一个有效的字幕文件（.srt）！');\r\n      }\r\n    };\r\n\r\n    /****************************************\r\n    INFO: 解析字幕文件的函数\r\n    ****************************************/\r\n    const readSubtitleFile = (file) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n          const content = reader.result;\r\n          original_subtitles.value = parseSRT(content); // 👈 解析为结构化数据\r\n      };\r\n      reader.readAsText(file);\r\n    };\r\n\r\n    const parseSRT = (text) => {\r\n      // 去除 BOM\r\n      if (text.charCodeAt(0) === 0xFEFF) {\r\n        text = text.slice(1);\r\n      }\r\n\r\n      // 标准化换行符\r\n      const normalizedText = text.replace(/\\r\\n|\\r/g, '\\n');\r\n      // 按行分割并清理\r\n      const lines = normalizedText.split('\\n').map(line => line.trim()).filter(line => line !== '');\r\n\r\n      const subtitles = [];\r\n      let i = 0;\r\n\r\n      while (i < lines.length) {\r\n        // 判断是否是字幕编号\r\n        if (/^\\d+$/.test(lines[i])) {\r\n          const index = lines[i];\r\n          const timestamp = lines[i + 1];\r\n\r\n          // 判断时间戳是否合法\r\n          if (/-->/i.test(timestamp)) {\r\n            let contentLines = [];\r\n            let j = i + 2;\r\n\r\n            // 收集内容行，直到遇到下一个编号或文件结束\r\n            while (j < lines.length && !/^\\d+$/.test(lines[j])) {\r\n              contentLines.push(lines[j]);\r\n              j++;\r\n            }\r\n\r\n            const original = contentLines[0] || '';\r\n            const translated = contentLines[1] || '';\r\n\r\n            subtitles.push({\r\n              index,\r\n              timestamp,\r\n              original,\r\n              translated,\r\n              allContent: contentLines // 可选：保留所有内容行\r\n            });\r\n\r\n            i = j; // 跳到下一块字幕\r\n          } else {\r\n            i++; // 时间戳不合法，跳过\r\n          }\r\n        } else {\r\n          i++; // 非编号行，跳过\r\n        }\r\n      }\r\n\r\n      return subtitles;\r\n    };\r\n\r\n    /****************************************\r\n    INFO: 处理文件的函数\r\n    ****************************************/\r\n    // const startProcessing = () => {\r\n    //   if (!File.value) {\r\n    //     ElMessage.warning('请先选择一个文件！');\r\n    //     return;\r\n    //   }\r\n    //   isProcessing.value = true;\r\n    //   console.log('开始处理文件:', File.value.name);\r\n\r\n    //   // 获取用户IP和时间戳并生成字段名\r\n    //   getUserIP().then(ip => {\r\n    //     const now = new Date();\r\n    //     const timestamp = now.toLocaleString('sv').replace(' ', '-').replace(/:/g, '');\r\n    //     const fieldName = `subtitle_${ip}_${timestamp}`;\r\n    //     console.log('字段名:', fieldName);\r\n    //     const formData = new FormData();\r\n    //     formData.append(fieldName, File); // 👈 动态字段名\r\n    //     fetch('http://localhost:8080/upload-subtitle', {\r\n    //         method: 'POST',\r\n    //         body: formData\r\n    //     });\r\n    //     // 等待与后端的链接\r\n    //   });\r\n\r\n    //   // --- API Integration Placeholder ---\r\n    //   // 1. Upload file to server\r\n    //   // 2. Poll for processing status\r\n    //   // 3. On success, fetch subtitle data\r\n    //   // ------------------------------------\r\n\r\n    //   // Simulate API call and receiving data\r\n    //   setTimeout(() => {\r\n    //     translated_subtitles.value = [\r\n    //       { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\r\n    //       { timestamp: '00:00:04,000 --> 00:00:06,789', original: '今天天气真好。', translated: 'The weather is great today.' },\r\n    //       { timestamp: '00:00:07,100 --> 00:00:09,500', original: '我们去公园吧。', translated: \"Let's go to the park.\" },\r\n    //       { timestamp: '00:00:10,000 --> 00:00:12,000', original: '再见！', translated: 'Goodbye!' },\r\n    //       { timestamp: '00:00:13,000 --> 00:00:15,000', original: '谢谢！', translated: 'Thanks!' },\r\n    //     ];\r\n    //     isProcessing.value = false;\r\n    //     isTranslated.value = true;\r\n    //     ElMessage.success('处理完成');\r\n    //   }, 3000); // Simulate a 3-second processing time\r\n    // };\r\n\r\n    const startProcessing = () => {\r\n      if (!File.value) {\r\n        ElMessage.warning('请先选择一个文件！');\r\n        return;\r\n      }\r\n      isProcessing.value = true;\r\n      console.log('开始处理文件:', File.value.name);\r\n      handleResponse(); // 👈 交给模块化函数处理\r\n    };\r\n\r\n    const handleResponse = async () => {\r\n      try {\r\n        const fieldName = await generateFieldName();\r\n        const uploadRes = await uploadFile(fieldName, File.value);\r\n\r\n        if (!uploadRes.ok) {\r\n          ElMessage.error('上传失败，请重试');\r\n          isProcessing.value = false;\r\n          return;\r\n        }\r\n\r\n        // 等待后端处理完成（可以用轮询或 WebSocket）\r\n        const result = await pollForResult(); // 👈 真实获取后端返回数据\r\n        translated_subtitles.value = result.subtitles;\r\n        isTranslated.value = true;\r\n        ElMessage.success('处理完成');\r\n      } catch (err) {\r\n        ElMessage.error(`处理失败: ${err.message}`);\r\n      } finally {\r\n        isProcessing.value = false;\r\n      }\r\n    };\r\n\r\n    const generateFieldName = async () => {\r\n      const ip = await getUserIP();\r\n      const timestamp = new Date().toLocaleString('sv').replace(' ', '-').replace(/:/g, '');\r\n      return `subtitle_${ip}_${timestamp}`;\r\n    };\r\n\r\n    const uploadFile = async (fieldName, file) => {\r\n      const formData = new FormData();\r\n      formData.append(fieldName, file);\r\n      // return fetch('http://localhost:8080/upload-subtitle', {\r\n      //   method: 'POST',\r\n      //   body: formData\r\n      // });\r\n      return {\r\n        ok:true, // 模拟成功响应\r\n      }\r\n    };\r\n\r\n    const pollForResult = async () => {\r\n      // 假设后端提供轮询接口\r\n      const response = await fetch('http://localhost:8080/subtitle-result');\r\n      if (!response.ok) throw new Error('后端处理失败');\r\n      return response.json(); // 返回字幕数据\r\n    };\r\n\r\n\r\n    /****************************************\r\n    INFO: 转换为SRT格式的函数\r\n    ****************************************/\r\n\r\n    const convertToSRT = (subtitlesArray) => {\r\n      return subtitlesArray.map((item, index) => {\r\n        return `${index + 1}\\n${item.timestamp}\\n${item.original}\\n${item.translated}\\n\\n`\r\n      }).join('')\r\n    };\r\n\r\n    const downloadSRT = () => {\r\n      const srtContent = convertToSRT(translated_subtitles.value)\r\n      const blob = new Blob([srtContent], { type: 'text/plain;charset=plaintext' })\r\n      const url = URL.createObjectURL(blob)\r\n\r\n      // 获取文件名称\r\n      const now = new Date();\r\n      const year = now.getFullYear();\r\n      const month = String(now.getMonth() + 1).padStart(2, '0'); // 月份从 0 开始\r\n      const day = String(now.getDate()).padStart(2, '0');\r\n      const hour = String(now.getHours()).padStart(2, '0');\r\n      const minute = String(now.getMinutes()).padStart(2, '0');\r\n      const second = String(now.getSeconds()).padStart(2, '0');\r\n      const downloadFileName = `subtitles-${year}${month}${day}-${hour}${minute}${second}.srt`;\r\n\r\n      const a = document.createElement('a')\r\n      a.href = url\r\n      a.download = downloadFileName;\r\n      a.click()\r\n\r\n      URL.revokeObjectURL(url)\r\n    };\r\n\r\n    const downloadJSON = (data) => {\r\n      if (!data || data.length === 0) {\r\n        ElMessage.error('没有数据可下载');\r\n        return;\r\n      }\r\n      downloadJSONoffset.value = true; // 设置下载状态为 true\r\n\r\n      const jsonContent = JSON.stringify(data, null, 2);\r\n      const blob = new Blob([jsonContent], { type: 'application/json;charset=utf-8' });\r\n      const url = URL.createObjectURL(blob);\r\n      const filename = `subtitles-${new Date().toISOString().replace(/[:.]/g, '-')}-as-json.json`; // 使用 ISO 格式的时间戳作为文件名\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = filename;\r\n      a.click();\r\n      setTimeout(() => {\r\n        downloadJSONoffset.value = false; // 下载完成后重置状态\r\n      }, 1000); // 1秒后重置状态\r\n      URL.revokeObjectURL(url);\r\n    };\r\n\r\n    return {\r\n      fileInput,\r\n      File,\r\n      isProcessing,\r\n      original_subtitles,\r\n      translated_subtitles,\r\n      isTranslated,\r\n      downloadJSONoffset,\r\n      triggerFileUpload,\r\n      handleFileChange,\r\n      readSubtitleFile,\r\n      handleDrop,\r\n      startProcessing,\r\n      parseSRT,\r\n      handleResponse,\r\n      generateFieldName,\r\n      uploadFile,\r\n      pollForResult,\r\n      convertToSRT,\r\n      downloadSRT,\r\n      downloadJSON,\r\n    };\r\n    // 这表示：你希望这些变量和方法可以在 <template> 中被访问和使用。\r\n    // 实际上你使用script setup 时，所有在 setup 函数中定义的变量和方法都会自动暴露到模板中。\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n/* Title */\r\n.tight-title {\r\n  margin: 0px 0;\r\n  line-height: 1;\r\n}\r\n\r\n/* Global Styling */\r\n:root {\r\n  --primary-color: #4A90E2;\r\n  --secondary-color: #50E3C2;\r\n  --background-color: #f4f7f9;\r\n  --text-color: #333;\r\n  --border-color: #dbe2e8;\r\n  --card-bg-color: #ffffff;\r\n  --font-family: 'Helvetica Neue', Arial, sans-serif;\r\n}\r\n\r\nbody {\r\n  font-family: var(--font-family);\r\n  background-color: var(--background-color);\r\n  color: var(--text-color);\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n#app-container {\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n  padding: 2rem;\r\n}\r\n\r\n/* Header */\r\n.app-header {\r\n  text-align: center;\r\n  margin-bottom: 2.5rem;\r\n  border-bottom: 1px solid var(--border-color);\r\n  padding-bottom: 1.5rem;\r\n}\r\n\r\n.app-header h1 {\r\n  font-size: 2.5rem;\r\n  color: var(--primary-color);\r\n  margin: 0;\r\n}\r\n\r\n.app-header .subtitle {\r\n  font-size: 1rem;\r\n  color: #777;\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n/* Main Content Layout */\r\n.main-content {\r\n  display: flex;\r\n  gap: 2rem;\r\n  flex-wrap: stretch;\r\n}\r\n\r\n.upload-section, .display-section {\r\n  background-color: var(--card-bg-color);\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\r\n  padding: 2rem;\r\n}\r\n\r\n.upload-section {\r\n  flex: 1;\r\n  min-width: 350px;\r\n  flex-direction: column;\r\n}\r\n\r\n.display-section {\r\n  flex: 2;\r\n  min-width: 600px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n}\r\n\r\n/* Upload Box */\r\n.upload-box {\r\n  border: 2px dashed var(--border-color);\r\n  border-radius: 10px;\r\n  padding: 2rem;\r\n  text-align: center;\r\n  transition: all 0.3s ease;\r\n  height: stretch;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.upload-box:hover {\r\n  border-color: var(--primary-color);\r\n  background-color: #f9fcff;\r\n}\r\n\r\n.upload-icon {\r\n  color: var(--primary-color);\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.upload-button {\r\n  background-color: var(--primary-color);\r\n  color: white;\r\n  border: none;\r\n  padding: 0.8rem 1.5rem;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n  font-weight: 500;\r\n  transition: background-color 0.3s ease;\r\n  margin: 1rem 0;\r\n}\r\n\r\n.upload-button:hover {\r\n  background-color: #357abd;\r\n}\r\n\r\n.file-info {\r\n  color: #888;\r\n  font-size: 0.85rem;\r\n}\r\n\r\n.file-details p {\r\n    word-break: break-all;\r\n    background-color: #f0f0f0;\r\n    padding: 0.5rem;\r\n    border-radius: 5px;\r\n}\r\n\r\n.process-button {\r\n    background-color: var(--secondary-color);\r\n    color: white;\r\n    border: none;\r\n    padding: 0.8rem 2rem;\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n    font-size: 1rem;\r\n    font-weight: 500;\r\n    transition: background-color 0.3s ease;\r\n    margin-top: 1rem;\r\n}\r\n\r\n.process-button:disabled {\r\n    background-color: #ccc;\r\n    cursor: not-allowed;\r\n}\r\n\r\n/* Display Section */\r\n.video-player-container, .subtitle-display-container {\r\n  width: 100%;\r\n}\r\n\r\n.video-player {\r\n  width: 100%;\r\n  border-radius: 8px;\r\n  background-color: #000;\r\n}\r\n\r\n.video-placeholder {\r\n  width: 100%;\r\n  height: 350px;\r\n  background-color: #e9ecef;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #6c757d;\r\n}\r\n\r\n.subtitle-area {\r\n  height: 300px;\r\n  overflow-y: auto;\r\n  border: 1px solid var(--border-color);\r\n  border-radius: 8px;\r\n  padding: 1rem;\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.subtitle-placeholder {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  color: #888;\r\n}\r\n\r\n.subtitle-list {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.subtitle-item {\r\n  margin-bottom: 1.2rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n.subtitle-item:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n.timestamp {\r\n  font-size: 0.8rem;\r\n  color: #666;\r\n  font-family: monospace;\r\n  margin-bottom: 0.4rem;\r\n  display: block;\r\n}\r\n\r\n.text-original {\r\n  font-size: 1rem;\r\n  color: #333;\r\n  margin: 0 0 0.3rem 0;\r\n}\r\n\r\n.text-translated {\r\n  font-size: 1rem;\r\n  color: var(--primary-color);\r\n  font-weight: 500;\r\n  margin: 0;\r\n}\r\n\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}