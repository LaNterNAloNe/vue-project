{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ElMessage } from 'element-plus';\nimport { ref } from 'vue';\nexport default {\n  name: 'App',\n  setup() {\n    const fileInput = ref(null);\n    const File = ref(null);\n    const videoSrc = ref('');\n    const isProcessing = ref(false);\n    const isTranslated = ref(false);\n\n    // Placeholder for subtitle data\n    const original_subtitles = ref([\n      // Example data structure\n      // { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\n    ]);\n    const translated_subtitles = ref([\n      // Example data structure\n      // { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\n      // { timestamp: '00:00:04,000 --> 00:00:06,789', original: '今天天气真好。', translated: 'The weather is great today.' }\n    ]);\n    const triggerFileUpload = () => {\n      fileInput.value.click();\n    };\n    const handleFileChange = event => {\n      const file = event.target.files[0];\n      if (!file) return;\n      const fileName = file.name.toLowerCase();\n      if (fileName.endsWith('.srt') || fileName.endsWith('.txt')) {\n        File.value = file;\n        readSubtitleFile(file); // 👈 添加解析方法\n      } else {\n        ElMessage.warning('请选择一个有效的字幕文件（.srt 或 .txt）！');\n      }\n    };\n    const readSubtitleFile = file => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const content = reader.result;\n        original_subtitles.value = parseSRT(content); // 👈 解析为结构化数据\n      };\n      reader.readAsText(file);\n    };\n    const parseSRT = text => {\n      const blocks = text.trim().split(/\\n{2,}/); // 按双换行分隔字幕块\n      const subtitles = [];\n      for (const block of blocks) {\n        const lines = block.split('\\n').map(line => line.trim()).filter(line => line !== '');\n        if (lines.length >= 3) {\n          const timestampLine = lines[1];\n          const originalText = lines.slice(2).join('<br>'); // 保留多行字幕\n          subtitles.push({\n            timestamp: timestampLine,\n            original: originalText,\n            translated: ''\n          });\n        }\n      }\n      return subtitles;\n    };\n    const handleDrop = event => {\n      const file = event.dataTransfer.files[0];\n      if (file && file.type.startsWith('video/')) {\n        File.value = file;\n        videoSrc.value = URL.createObjectURL(file);\n      } else {\n        ElMessage.warning('请拖入一个有效的视频文件！');\n      }\n    };\n    const startProcessing = () => {\n      if (!File.value) {\n        ElMessage.warning('请先选择一个文件！');\n        return;\n      }\n      isProcessing.value = true;\n      console.log('开始处理文件:', File.value.name);\n\n      // --- API Integration Placeholder ---\n      // 1. Upload file to server\n      // 2. Poll for processing status\n      // 3. On success, fetch subtitle data\n      // ------------------------------------\n\n      // Simulate API call and receiving data\n      setTimeout(() => {\n        translated_subtitles.value = [{\n          timestamp: '00:00:01,234 --> 00:00:03,456',\n          original: '你好！',\n          translated: 'Hello!'\n        }, {\n          timestamp: '00:00:04,000 --> 00:00:06,789',\n          original: '今天天气真好。',\n          translated: 'The weather is great today.'\n        }, {\n          timestamp: '00:00:07,100 --> 00:00:09,500',\n          original: '我们去公园吧。',\n          translated: \"Let's go to the park.\"\n        }];\n        isProcessing.value = false;\n        isTranslated.value = true;\n        ElMessage.success('处理完成');\n      }, 3000); // Simulate a 3-second processing time\n    };\n    const convertToSRT = subtitlesArray => {\n      return subtitlesArray.map((item, index) => {\n        return `${index + 1}\n${item.timestamp}\n${item.original}\n${item.translated}\n`; // 此处前面不应该有空行\n      }).join('');\n    };\n    const downloadSRT = () => {\n      const srtContent = convertToSRT(translated_subtitles.value);\n      const blob = new Blob([srtContent], {\n        type: 'text/plain;charset=utf-8'\n      });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = 'subtitles.srt';\n      a.click();\n      URL.revokeObjectURL(url);\n    };\n    return {\n      fileInput,\n      File,\n      videoSrc,\n      isProcessing,\n      original_subtitles,\n      translated_subtitles,\n      isTranslated,\n      triggerFileUpload,\n      handleFileChange,\n      readSubtitleFile,\n      handleDrop,\n      startProcessing,\n      convertToSRT,\n      downloadSRT\n    };\n    // 这表示：你希望这些变量和方法可以在 <template> 中被访问和使用。\n    // 实际上你使用script setup 时，所有在 setup 函数中定义的变量和方法都会自动暴露到模板中。\n  }\n};","map":{"version":3,"names":["ElMessage","ref","name","setup","fileInput","File","videoSrc","isProcessing","isTranslated","original_subtitles","translated_subtitles","triggerFileUpload","value","click","handleFileChange","event","file","target","files","fileName","toLowerCase","endsWith","readSubtitleFile","warning","reader","FileReader","onload","content","result","parseSRT","readAsText","text","blocks","trim","split","subtitles","block","lines","map","line","filter","length","timestampLine","originalText","slice","join","push","timestamp","original","translated","handleDrop","dataTransfer","type","startsWith","URL","createObjectURL","startProcessing","console","log","setTimeout","success","convertToSRT","subtitlesArray","item","index","downloadSRT","srtContent","blob","Blob","url","a","document","createElement","href","download","revokeObjectURL"],"sources":["C:\\NewFiles\\Vue3\\vue-project\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"app-container\">\r\n    <header class=\"app-header\">\r\n      <h1>中国网络微短剧英译智能体</h1>\r\n      <p class=\"subtitle\">AI-Powered Chinese Short Drama Translation Agent</p>\r\n    </header>\r\n\r\n    <main class=\"main-content\">\r\n      <section class=\"upload-section\">\r\n        <div class=\"upload-box\" @dragover.prevent @drop.prevent=\"handleDrop\" @click=\"triggerFileUpload\">\r\n          <input type=\"file\" id=\"file-upload\" @change=\"handleFileChange\" accept=\".srt,.txt\" ref=\"fileInput\" style=\"display: none;\">\r\n          \r\n          <div v-if=\"!File\" class=\"upload-prompt\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"upload-icon\"><path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path><polyline points=\"17 8 12 3 7 8\"></polyline><line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\"></line></svg>\r\n            <p>将文本或字幕文件拖拽到此处</p>\r\n            <small class=\"file-info\">支持 txt , srt 等格式</small>\r\n          </div>\r\n\r\n          <div v-if=\"File\" class=\"file-details\">\r\n            <h4>已选择文件:</h4>\r\n            <p>{{ File.name }}</p>\r\n            <button @click.stop=\"startProcessing\" class=\"process-button\" :disabled=\"isProcessing\">\r\n              {{ isProcessing ? '处理中...' : '开始翻译' }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section class=\"display-section\">\r\n        <h3 class=\"tight-title\">源字幕预览 (Original Subtitle Preview)</h3>\r\n        <div class=\"subtitle-display-container\">\r\n          <div class=\"subtitle-area\">\r\n            <div v-if=\"File === null\" class=\"subtitle-placeholder\"> \r\n              <p>上传的文件或字幕内容将在此显示...</p>\r\n            </div>\r\n            <div v-if=\"File !== null && original_subtitles.length === 0\">\r\n              <p>上传的文件暂无内容</p>\r\n            </div>\r\n\r\n            <ul v-else class=\"subtitle-list\">\r\n              <li v-for=\"(subtitle, index) in original_subtitles\" :key=\"index\" class=\"subtitle-item\">\r\n                <span class=\"timestamp\">{{ subtitle.timestamp }}</span>\r\n                <p class=\"original\">{{ subtitle.original }}</p>\r\n                <p class=\"translated\">{{ subtitle.translated }}</p>\r\n              </li>\r\n            </ul>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <h3 class=\"tight-title\">翻译字幕预览 (Translated Subtitle Preview)</h3>\r\n        <div class=\"subtitle-display-container\">\r\n          <div class=\"subtitle-area\">\r\n\r\n            <div v-if=\"!isTranslated\" class=\"subtitle-placeholder\"> \r\n            <!-- 此处应判断是否完成翻译（翻译结果包含无文本【特殊情况】） -->\r\n              <p>翻译生成的字幕将在此显示...</p>\r\n            </div>\r\n\r\n            <div v-if=\"translated_subtitles.length === 0 && isTranslated\" class=\"subtitle-placeholder\"> \r\n              <p>暂无翻译结果</p>\r\n            </div>\r\n\r\n            <ul v-else class=\"subtitle-list\">\r\n              <li v-for=\"(subtitle, index) in translated_subtitles\" :key=\"index\" class=\"subtitle-item\">\r\n                <span class=\"timestamp\">{{ subtitle.timestamp }}</span>\r\n                <p class=\"text-original\">{{ subtitle.original }}</p>\r\n                <p class=\"text-translated\">{{ subtitle.translated }}</p>\r\n              </li>\r\n            </ul>\r\n\r\n          </div>\r\n          <button v-if=\"isTranslated\" @click=\"downloadSRT(translated_subtitles)\" class=\"process-button\">下载字幕文件</button>\r\n        </div>\r\n      </section>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ElMessage } from 'element-plus';\r\nimport { ref } from 'vue';\r\n\r\nexport default {\r\n  name: 'App',\r\n  setup() {\r\n    const fileInput = ref(null);\r\n    const File = ref(null);\r\n    const videoSrc = ref('');\r\n    const isProcessing = ref(false);\r\n    const isTranslated = ref(false);\r\n    \r\n    // Placeholder for subtitle data\r\n    const original_subtitles = ref([\r\n      // Example data structure\r\n      // { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\r\n    ]);\r\n    const translated_subtitles = ref([\r\n      // Example data structure\r\n      // { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\r\n      // { timestamp: '00:00:04,000 --> 00:00:06,789', original: '今天天气真好。', translated: 'The weather is great today.' }\r\n    ]);\r\n\r\n    const triggerFileUpload = () => {\r\n      fileInput.value.click();\r\n    };\r\n\r\n    const handleFileChange = (event) => {\r\n        const file = event.target.files[0];\r\n        if (!file) return;\r\n    \r\n        const fileName = file.name.toLowerCase();\r\n        if (fileName.endsWith('.srt') || fileName.endsWith('.txt')){\r\n        File.value = file;\r\n        readSubtitleFile(file); // 👈 添加解析方法\r\n        } else {\r\n        ElMessage.warning('请选择一个有效的字幕文件（.srt 或 .txt）！');\r\n        }\r\n    };\r\n\r\n    const readSubtitleFile = (file) => {\r\n        const reader = new FileReader();\r\n        reader.onload = () => {\r\n        const content = reader.result;\r\n        original_subtitles.value = parseSRT(content); // 👈 解析为结构化数据\r\n        };\r\n        reader.readAsText(file);\r\n    };\r\n\r\n    const parseSRT = (text) => {\r\n        const blocks = text.trim().split(/\\n{2,}/); // 按双换行分隔字幕块\r\n        const subtitles = [];\r\n\r\n        for (const block of blocks) {\r\n            const lines = block.split('\\n').map(line => line.trim()).filter(line => line !== '');\r\n            if (lines.length >= 3) {\r\n            const timestampLine = lines[1];\r\n            const originalText = lines.slice(2).join('<br>'); // 保留多行字幕\r\n            subtitles.push({\r\n                timestamp: timestampLine,\r\n                original: originalText,\r\n                translated: ''\r\n            });\r\n            }\r\n        }\r\n\r\n        return subtitles;\r\n    };\r\n\r\n\r\n    const handleDrop = (event) => {\r\n        const file = event.dataTransfer.files[0];\r\n        if (file && file.type.startsWith('video/')) {\r\n            File.value = file;\r\n            videoSrc.value = URL.createObjectURL(file);\r\n        } else {\r\n            ElMessage.warning('请拖入一个有效的视频文件！');\r\n        }\r\n    };\r\n\r\n    const startProcessing = () => {\r\n      if (!File.value) {\r\n        ElMessage.warning('请先选择一个文件！');\r\n        return;\r\n      }\r\n      isProcessing.value = true;\r\n      console.log('开始处理文件:', File.value.name);\r\n      \r\n      // --- API Integration Placeholder ---\r\n      // 1. Upload file to server\r\n      // 2. Poll for processing status\r\n      // 3. On success, fetch subtitle data\r\n      // ------------------------------------\r\n\r\n      // Simulate API call and receiving data\r\n      setTimeout(() => {\r\n        translated_subtitles.value = [\r\n          { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\r\n          { timestamp: '00:00:04,000 --> 00:00:06,789', original: '今天天气真好。', translated: 'The weather is great today.' },\r\n          { timestamp: '00:00:07,100 --> 00:00:09,500', original: '我们去公园吧。', translated: \"Let's go to the park.\" }\r\n        ];\r\n        isProcessing.value = false;\r\n        isTranslated.value = true;\r\n        ElMessage.success('处理完成');\r\n      }, 3000); // Simulate a 3-second processing time\r\n    };\r\n\r\n    const convertToSRT = (subtitlesArray) => {\r\n    return subtitlesArray.map((item, index) => {\r\n        return `${index + 1}\r\n${item.timestamp}\r\n${item.original}\r\n${item.translated}\r\n` // 此处前面不应该有空行\r\n    }).join('')\r\n    }\r\n\r\n    const downloadSRT = () => {\r\n    const srtContent = convertToSRT(translated_subtitles.value)\r\n    const blob = new Blob([srtContent], { type: 'text/plain;charset=utf-8' })\r\n    const url = URL.createObjectURL(blob)\r\n\r\n    const a = document.createElement('a')\r\n    a.href = url\r\n    a.download = 'subtitles.srt'\r\n    a.click()\r\n\r\n    URL.revokeObjectURL(url)\r\n    }\r\n\r\n    return {\r\n      fileInput,\r\n      File,\r\n      videoSrc,\r\n      isProcessing,\r\n      original_subtitles,\r\n      translated_subtitles,\r\n      isTranslated,\r\n      triggerFileUpload,\r\n      handleFileChange,\r\n      readSubtitleFile,\r\n      handleDrop,\r\n      startProcessing,\r\n      convertToSRT,\r\n      downloadSRT,\r\n    };\r\n    // 这表示：你希望这些变量和方法可以在 <template> 中被访问和使用。\r\n    // 实际上你使用script setup 时，所有在 setup 函数中定义的变量和方法都会自动暴露到模板中。\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n/* Title */\r\n.tight-title {\r\n  margin: 10px 0;\r\n  line-height: 1;\r\n}\r\n\r\n/* Global Styling */\r\n:root {\r\n  --primary-color: #4A90E2;\r\n  --secondary-color: #50E3C2;\r\n  --background-color: #f4f7f9;\r\n  --text-color: #333;\r\n  --border-color: #dbe2e8;\r\n  --card-bg-color: #ffffff;\r\n  --font-family: 'Helvetica Neue', Arial, sans-serif;\r\n}\r\n\r\nbody {\r\n  font-family: var(--font-family);\r\n  background-color: var(--background-color);\r\n  color: var(--text-color);\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n#app-container {\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n  padding: 2rem;\r\n}\r\n\r\n/* Header */\r\n.app-header {\r\n  text-align: center;\r\n  margin-bottom: 2.5rem;\r\n  border-bottom: 1px solid var(--border-color);\r\n  padding-bottom: 1.5rem;\r\n}\r\n\r\n.app-header h1 {\r\n  font-size: 2.5rem;\r\n  color: var(--primary-color);\r\n  margin: 0;\r\n}\r\n\r\n.app-header .subtitle {\r\n  font-size: 1rem;\r\n  color: #777;\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n/* Main Content Layout */\r\n.main-content {\r\n  display: flex;\r\n  gap: 2rem;\r\n  flex-wrap: stretch;\r\n}\r\n\r\n.upload-section, .display-section {\r\n  background-color: var(--card-bg-color);\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\r\n  padding: 2rem;\r\n}\r\n\r\n.upload-section {\r\n  flex: 1;\r\n  min-width: 350px;\r\n  flex-direction: column;\r\n}\r\n\r\n.display-section {\r\n  flex: 2;\r\n  min-width: 600px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n}\r\n\r\n/* Upload Box */\r\n.upload-box {\r\n  border: 2px dashed var(--border-color);\r\n  border-radius: 10px;\r\n  padding: 2rem;\r\n  text-align: center;\r\n  transition: all 0.3s ease;\r\n  height: stretch;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.upload-box:hover {\r\n  border-color: var(--primary-color);\r\n  background-color: #f9fcff;\r\n}\r\n\r\n.upload-icon {\r\n  color: var(--primary-color);\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.upload-button {\r\n  background-color: var(--primary-color);\r\n  color: white;\r\n  border: none;\r\n  padding: 0.8rem 1.5rem;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n  font-weight: 500;\r\n  transition: background-color 0.3s ease;\r\n  margin: 1rem 0;\r\n}\r\n\r\n.upload-button:hover {\r\n  background-color: #357abd;\r\n}\r\n\r\n.file-info {\r\n  color: #888;\r\n  font-size: 0.85rem;\r\n}\r\n\r\n.file-details p {\r\n    word-break: break-all;\r\n    background-color: #f0f0f0;\r\n    padding: 0.5rem;\r\n    border-radius: 5px;\r\n}\r\n\r\n.process-button {\r\n    background-color: var(--secondary-color);\r\n    color: white;\r\n    border: none;\r\n    padding: 0.8rem 2rem;\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n    font-size: 1rem;\r\n    font-weight: 500;\r\n    transition: background-color 0.3s ease;\r\n    margin-top: 1rem;\r\n}\r\n\r\n.process-button:disabled {\r\n    background-color: #ccc;\r\n    cursor: not-allowed;\r\n}\r\n\r\n/* Display Section */\r\n.video-player-container, .subtitle-display-container {\r\n  width: 100%;\r\n}\r\n\r\n.video-player {\r\n  width: 100%;\r\n  border-radius: 8px;\r\n  background-color: #000;\r\n}\r\n\r\n.video-placeholder {\r\n  width: 100%;\r\n  height: 350px;\r\n  background-color: #e9ecef;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #6c757d;\r\n}\r\n\r\n.subtitle-area {\r\n  height: 300px;\r\n  overflow-y: auto;\r\n  border: 1px solid var(--border-color);\r\n  border-radius: 8px;\r\n  padding: 1rem;\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.subtitle-placeholder {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  color: #888;\r\n}\r\n\r\n.subtitle-list {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.subtitle-item {\r\n  margin-bottom: 1.2rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n.subtitle-item:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n.timestamp {\r\n  font-size: 0.8rem;\r\n  color: #666;\r\n  font-family: monospace;\r\n  margin-bottom: 0.4rem;\r\n  display: block;\r\n}\r\n\r\n.text-original {\r\n  font-size: 1rem;\r\n  color: #333;\r\n  margin: 0 0 0.3rem 0;\r\n}\r\n\r\n.text-translated {\r\n  font-size: 1rem;\r\n  color: var(--primary-color);\r\n  font-weight: 500;\r\n  margin: 0;\r\n}\r\n\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}