{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ElMessage } from 'element-plus';\nimport { ref } from 'vue';\nasync function getUserIP() {\n  try {\n    const res = await fetch('https://api.ipify.org?format=json');\n    const data = await res.json();\n    console.log('用户 IP:', data.ip);\n    return data.ip;\n  } catch (error) {\n    console.error('获取 IP 失败:', error);\n    return null;\n  }\n}\nexport default {\n  name: 'App',\n  setup() {\n    const fileInput = ref(null);\n    const File = ref(null);\n    const isProcessing = ref(false);\n    const isTranslated = ref(false);\n\n    // Placeholder for subtitle data\n    const original_subtitles = ref([\n      // Example data structure\n      // { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\n    ]);\n    const translated_subtitles = ref([\n      // Example data structure\n      // { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\n      // { timestamp: '00:00:04,000 --> 00:00:06,789', original: '今天天气真好。', translated: 'The weather is great today.' }\n    ]);\n\n    /****************************************\r\n    INFO: 触发文件上传的函数\r\n    ****************************************/\n    const triggerFileUpload = () => {\n      fileInput.value.click();\n    };\n    const handleDrop = event => {\n      const file = event.dataTransfer.files[0];\n      const fileName = file.name.toLowerCase();\n      if (file && (fileName.endsWith('.srt') || fileName.endsWith('.txt'))) {\n        File.value = file;\n        readSubtitleFile(file); // 👈 添加解析方法\n      } else {\n        ElMessage.warning('请拖入一个有效的文本或字幕文件！');\n      }\n    };\n    const handleFileChange = event => {\n      const file = event.target.files[0];\n      if (!file) return;\n      const fileName = file.name.toLowerCase();\n      if (fileName.endsWith('.srt') || fileName.endsWith('.txt')) {\n        File.value = file;\n        readSubtitleFile(file); // 👈 添加解析方法\n      } else {\n        ElMessage.warning('请选择一个有效的字幕文件（.srt 或 .txt）！');\n      }\n    };\n\n    /****************************************\r\n    INFO: 解析字幕文件的函数\r\n    ****************************************/\n    const readSubtitleFile = file => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const content = reader.result;\n        original_subtitles.value = parseSRT(content); // 👈 解析为结构化数据\n      };\n      reader.readAsText(file);\n    };\n    const parseSRT = text => {\n      // 去除 BOM\n      if (text.charCodeAt(0) === 0xFEFF) {\n        text = text.slice(1);\n      }\n\n      // 标准化换行符\n      const normalizedText = text.replace(/\\r\\n|\\r/g, '\\n');\n      // 按行分割并清理\n      const lines = normalizedText.split('\\n').map(line => line.trim()).filter(line => line !== '');\n      const subtitles = [];\n      let i = 0;\n      while (i < lines.length) {\n        // 判断是否是字幕编号\n        if (/^\\d+$/.test(lines[i])) {\n          const index = lines[i];\n          const timestamp = lines[i + 1];\n\n          // 判断时间戳是否合法\n          if (/-->/i.test(timestamp)) {\n            let contentLines = [];\n            let j = i + 2;\n\n            // 收集内容行，直到遇到下一个编号或文件结束\n            while (j < lines.length && !/^\\d+$/.test(lines[j])) {\n              contentLines.push(lines[j]);\n              j++;\n            }\n            const original = contentLines[0] || '';\n            const translated = contentLines[1] || '';\n            subtitles.push({\n              index,\n              timestamp,\n              original,\n              translated,\n              allContent: contentLines // 可选：保留所有内容行\n            });\n            i = j; // 跳到下一块字幕\n          } else {\n            i++; // 时间戳不合法，跳过\n          }\n        } else {\n          i++; // 非编号行，跳过\n        }\n      }\n      return subtitles;\n    };\n\n    /****************************************\r\n    INFO: 处理文件的函数\r\n    ****************************************/\n    const startProcessing = () => {\n      if (!File.value) {\n        ElMessage.warning('请先选择一个文件！');\n        return;\n      }\n      isProcessing.value = true;\n      console.log('开始处理文件:', File.value.name);\n\n      // 获取用户 IP 并生成字段名\n      getUserIP().then(ip => {\n        const now = new Date();\n        const timestamp = now.toLocaleString('sv').replace(' ', '-').replace(/:/g, '');\n        const fieldName = `subtitle_${ip}_${timestamp}`;\n        console.log('字段名:', fieldName);\n      });\n\n      // --- API Integration Placeholder ---\n      // 1. Upload file to server\n      // 2. Poll for processing status\n      // 3. On success, fetch subtitle data\n      // ------------------------------------\n\n      // Simulate API call and receiving data\n      setTimeout(() => {\n        translated_subtitles.value = [{\n          timestamp: '00:00:01,234 --> 00:00:03,456',\n          original: '你好！',\n          translated: 'Hello!'\n        }, {\n          timestamp: '00:00:04,000 --> 00:00:06,789',\n          original: '今天天气真好。',\n          translated: 'The weather is great today.'\n        }, {\n          timestamp: '00:00:07,100 --> 00:00:09,500',\n          original: '我们去公园吧。',\n          translated: \"Let's go to the park.\"\n        }, {\n          timestamp: '00:00:10,000 --> 00:00:12,000',\n          original: '再见！',\n          translated: 'Goodbye!'\n        }, {\n          timestamp: '00:00:13,000 --> 00:00:15,000',\n          original: '谢谢！',\n          translated: 'Thanks!'\n        }];\n        isProcessing.value = false;\n        isTranslated.value = true;\n        ElMessage.success('处理完成');\n      }, 3000); // Simulate a 3-second processing time\n    };\n    const convertToSRT = subtitlesArray => {\n      return subtitlesArray.map((item, index) => {\n        return `${index + 1}\n${item.timestamp}\n${item.original}\n${item.translated}\n`; // 此处前面不应该有空行\n      }).join('');\n    };\n    const downloadSRT = () => {\n      const srtContent = convertToSRT(translated_subtitles.value);\n      const blob = new Blob([srtContent], {\n        type: 'text/plain;charset=plaintext'\n      });\n      const url = URL.createObjectURL(blob);\n\n      // 获取文件名称\n      const now = new Date();\n      const year = now.getFullYear();\n      const month = String(now.getMonth() + 1).padStart(2, '0'); // 月份从 0 开始\n      const day = String(now.getDate()).padStart(2, '0');\n      const hour = String(now.getHours()).padStart(2, '0');\n      const minute = String(now.getMinutes()).padStart(2, '0');\n      const second = String(now.getSeconds()).padStart(2, '0');\n      const downloadFileName = `subtitles-${year}${month}${day}-${hour}${minute}${second}.srt`;\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = downloadFileName;\n      a.click();\n      URL.revokeObjectURL(url);\n    };\n    return {\n      fileInput,\n      File,\n      isProcessing,\n      original_subtitles,\n      translated_subtitles,\n      isTranslated,\n      triggerFileUpload,\n      handleFileChange,\n      readSubtitleFile,\n      handleDrop,\n      startProcessing,\n      convertToSRT,\n      downloadSRT\n    };\n    // 这表示：你希望这些变量和方法可以在 <template> 中被访问和使用。\n    // 实际上你使用script setup 时，所有在 setup 函数中定义的变量和方法都会自动暴露到模板中。\n  }\n};","map":{"version":3,"names":["ElMessage","ref","getUserIP","res","fetch","data","json","console","log","ip","error","name","setup","fileInput","File","isProcessing","isTranslated","original_subtitles","translated_subtitles","triggerFileUpload","value","click","handleDrop","event","file","dataTransfer","files","fileName","toLowerCase","endsWith","readSubtitleFile","warning","handleFileChange","target","reader","FileReader","onload","content","result","parseSRT","readAsText","text","charCodeAt","slice","normalizedText","replace","lines","split","map","line","trim","filter","subtitles","i","length","test","index","timestamp","contentLines","j","push","original","translated","allContent","startProcessing","then","now","Date","toLocaleString","fieldName","setTimeout","success","convertToSRT","subtitlesArray","item","join","downloadSRT","srtContent","blob","Blob","type","url","URL","createObjectURL","year","getFullYear","month","String","getMonth","padStart","day","getDate","hour","getHours","minute","getMinutes","second","getSeconds","downloadFileName","a","document","createElement","href","download","revokeObjectURL"],"sources":["C:\\NewFiles\\Vue3\\vue-project\\src\\App.vue"],"sourcesContent":["<template>\r\n  <div id=\"app-container\">\r\n    <header class=\"app-header\">\r\n      <h1>中国网络微短剧英译智能体</h1>\r\n      <p class=\"subtitle\">AI-Powered Chinese Short Drama Translation Agent</p>\r\n    </header>\r\n\r\n    <main class=\"main-content\">\r\n      <section class=\"upload-section\">\r\n        <div class=\"upload-box\" @dragover.prevent @drop.prevent=\"handleDrop\" @click=\"triggerFileUpload\">\r\n          <input type=\"file\" id=\"file-upload\" @change=\"handleFileChange\" accept=\".srt,.txt\" ref=\"fileInput\" style=\"display: none;\">\r\n          \r\n          <div v-if=\"!File\" class=\"upload-prompt\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"64\" height=\"64\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"upload-icon\"><path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"></path><polyline points=\"17 8 12 3 7 8\"></polyline><line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\"></line></svg> <!-- upload icon -->\r\n            <p>将文本或字幕文件拖拽到此处</p>\r\n            <small class=\"file-info\">支持 txt , srt 等格式</small>\r\n          </div>\r\n\r\n          <div v-if=\"File\" class=\"file-details\">\r\n            <h4>已选择文件:</h4>\r\n            <p>{{ File.name }}</p>\r\n            <button @click.stop=\"startProcessing\" class=\"process-button\" :disabled=\"isProcessing\">\r\n              {{ isProcessing ? '处理中...' : '开始翻译' }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      <section class=\"display-section\">\r\n        <h3 class=\"tight-title\">源字幕预览 (Original Subtitle Preview)</h3>\r\n        <div class=\"subtitle-display-container\">\r\n          <div class=\"subtitle-area\">\r\n            <div v-if=\"File === null\" class=\"subtitle-placeholder\"> \r\n              <p>上传的文件或字幕内容将在此显示...</p>\r\n            </div>\r\n            <div v-if=\"File !== null && original_subtitles.length === 0\" class=\"subtitle-placeholder\">\r\n              <p>上传的文件暂无内容</p>\r\n            </div>\r\n\r\n            <ul v-if=\"original_subtitles.length > 0\" class=\"subtitle-list\">\r\n              <li v-for=\"(subtitle, index) in original_subtitles\" :key=\"index\" class=\"subtitle-item\">\r\n                <span class=\"timestamp\">{{ subtitle.timestamp }}</span>\r\n                <p class=\"text-original\" v-html=\"subtitle.original\"></p>\r\n                <p class=\"text-original\" v-if=\"subtitle.translated\">{{ subtitle.translated }}</p>\r\n              </li>\r\n            </ul>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <h3 class=\"tight-title\">翻译字幕预览 (Translated Subtitle Preview)</h3>\r\n        <div class=\"subtitle-display-container\">\r\n          <div class=\"subtitle-area\">\r\n\r\n            <div v-if=\"!isTranslated\" class=\"subtitle-placeholder\"> \r\n            <!-- 此处应判断是否完成翻译（翻译结果包含无文本【特殊情况】） -->\r\n              <p>翻译生成的字幕将在此显示...</p>\r\n            </div>\r\n\r\n            <div v-if=\"translated_subtitles.length === 0 && isTranslated\" class=\"subtitle-placeholder\"> \r\n              <p>暂无翻译结果</p>\r\n            </div>\r\n\r\n            <ul v-else class=\"subtitle-list\">\r\n              <li v-for=\"(subtitle, index) in translated_subtitles\" :key=\"index\" class=\"subtitle-item\">\r\n                <span class=\"timestamp\">{{ subtitle.timestamp }}</span>\r\n                <p class=\"text-original\">{{ subtitle.original }}</p>\r\n                <p class=\"text-translated\">{{ subtitle.translated }}</p>\r\n              </li>\r\n            </ul>\r\n\r\n          </div>\r\n          <button v-if=\"isTranslated\" @click=\"downloadSRT(translated_subtitles)\" class=\"process-button\">下载字幕文件</button>\r\n        </div>\r\n      </section>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ElMessage } from 'element-plus';\r\nimport { ref } from 'vue';\r\n\r\nasync function getUserIP() {\r\n  try {\r\n    const res = await fetch('https://api.ipify.org?format=json');\r\n    const data = await res.json();\r\n    console.log('用户 IP:', data.ip);\r\n    return data.ip;\r\n  } catch (error) {\r\n    console.error('获取 IP 失败:', error);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default {\r\n  name: 'App',\r\n  setup() {\r\n    const fileInput = ref(null);\r\n    const File = ref(null);\r\n    const isProcessing = ref(false);\r\n    const isTranslated = ref(false);\r\n    \r\n    // Placeholder for subtitle data\r\n    const original_subtitles = ref([\r\n      // Example data structure\r\n      // { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\r\n    ]);\r\n    const translated_subtitles = ref([\r\n      // Example data structure\r\n      // { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\r\n      // { timestamp: '00:00:04,000 --> 00:00:06,789', original: '今天天气真好。', translated: 'The weather is great today.' }\r\n    ]);\r\n\r\n    /****************************************\r\n    INFO: 触发文件上传的函数\r\n    ****************************************/\r\n    const triggerFileUpload = () => {\r\n      fileInput.value.click();\r\n    };\r\n\r\n    const handleDrop = (event) => {\r\n      const file = event.dataTransfer.files[0];\r\n      const fileName = file.name.toLowerCase();\r\n      if (file && (fileName.endsWith('.srt') || fileName.endsWith('.txt'))) {\r\n        File.value = file;\r\n        readSubtitleFile(file); // 👈 添加解析方法\r\n      } else {\r\n        ElMessage.warning('请拖入一个有效的文本或字幕文件！');\r\n      }\r\n    };\r\n\r\n    const handleFileChange = (event) => {\r\n      const file = event.target.files[0];\r\n      if (!file) return;\r\n  \r\n      const fileName = file.name.toLowerCase();\r\n      if (fileName.endsWith('.srt') || fileName.endsWith('.txt')){\r\n        File.value = file;\r\n        readSubtitleFile(file); // 👈 添加解析方法\r\n      } else {\r\n        ElMessage.warning('请选择一个有效的字幕文件（.srt 或 .txt）！');\r\n      }\r\n    };\r\n\r\n    /****************************************\r\n    INFO: 解析字幕文件的函数\r\n    ****************************************/\r\n    const readSubtitleFile = (file) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n          const content = reader.result;\r\n          original_subtitles.value = parseSRT(content); // 👈 解析为结构化数据\r\n      };\r\n      reader.readAsText(file);\r\n    };\r\n\r\n    const parseSRT = (text) => {\r\n      // 去除 BOM\r\n      if (text.charCodeAt(0) === 0xFEFF) {\r\n        text = text.slice(1);\r\n      }\r\n\r\n      // 标准化换行符\r\n      const normalizedText = text.replace(/\\r\\n|\\r/g, '\\n');\r\n      // 按行分割并清理\r\n      const lines = normalizedText.split('\\n').map(line => line.trim()).filter(line => line !== '');\r\n\r\n      const subtitles = [];\r\n      let i = 0;\r\n\r\n      while (i < lines.length) {\r\n        // 判断是否是字幕编号\r\n        if (/^\\d+$/.test(lines[i])) {\r\n          const index = lines[i];\r\n          const timestamp = lines[i + 1];\r\n\r\n          // 判断时间戳是否合法\r\n          if (/-->/i.test(timestamp)) {\r\n            let contentLines = [];\r\n            let j = i + 2;\r\n\r\n            // 收集内容行，直到遇到下一个编号或文件结束\r\n            while (j < lines.length && !/^\\d+$/.test(lines[j])) {\r\n              contentLines.push(lines[j]);\r\n              j++;\r\n            }\r\n\r\n            const original = contentLines[0] || '';\r\n            const translated = contentLines[1] || '';\r\n\r\n            subtitles.push({\r\n              index,\r\n              timestamp,\r\n              original,\r\n              translated,\r\n              allContent: contentLines // 可选：保留所有内容行\r\n            });\r\n\r\n            i = j; // 跳到下一块字幕\r\n          } else {\r\n            i++; // 时间戳不合法，跳过\r\n          }\r\n        } else {\r\n          i++; // 非编号行，跳过\r\n        }\r\n      }\r\n\r\n      return subtitles;\r\n    };\r\n\r\n    /****************************************\r\n    INFO: 处理文件的函数\r\n    ****************************************/\r\n    const startProcessing = () => {\r\n      if (!File.value) {\r\n        ElMessage.warning('请先选择一个文件！');\r\n        return;\r\n      }\r\n      isProcessing.value = true;\r\n      console.log('开始处理文件:', File.value.name);\r\n\r\n      // 获取用户 IP 并生成字段名\r\n      getUserIP().then(ip => {\r\n        const now = new Date();\r\n        const timestamp = now.toLocaleString('sv').replace(' ', '-').replace(/:/g, '');\r\n        const fieldName = `subtitle_${ip}_${timestamp}`;\r\n        console.log('字段名:', fieldName);\r\n      });\r\n\r\n\r\n      // --- API Integration Placeholder ---\r\n      // 1. Upload file to server\r\n      // 2. Poll for processing status\r\n      // 3. On success, fetch subtitle data\r\n      // ------------------------------------\r\n\r\n      // Simulate API call and receiving data\r\n      setTimeout(() => {\r\n        translated_subtitles.value = [\r\n          { timestamp: '00:00:01,234 --> 00:00:03,456', original: '你好！', translated: 'Hello!' },\r\n          { timestamp: '00:00:04,000 --> 00:00:06,789', original: '今天天气真好。', translated: 'The weather is great today.' },\r\n          { timestamp: '00:00:07,100 --> 00:00:09,500', original: '我们去公园吧。', translated: \"Let's go to the park.\" },\r\n          { timestamp: '00:00:10,000 --> 00:00:12,000', original: '再见！', translated: 'Goodbye!' },\r\n          { timestamp: '00:00:13,000 --> 00:00:15,000', original: '谢谢！', translated: 'Thanks!' },\r\n        ];\r\n        isProcessing.value = false;\r\n        isTranslated.value = true;\r\n        ElMessage.success('处理完成');\r\n      }, 3000); // Simulate a 3-second processing time\r\n    };\r\n\r\n    const convertToSRT = (subtitlesArray) => {\r\n      return subtitlesArray.map((item, index) => {\r\n        return `${index + 1}\r\n${item.timestamp}\r\n${item.original}\r\n${item.translated}\r\n` // 此处前面不应该有空行\r\n      }).join('')\r\n    };\r\n\r\n    const downloadSRT = () => {\r\n      const srtContent = convertToSRT(translated_subtitles.value)\r\n      const blob = new Blob([srtContent], { type: 'text/plain;charset=plaintext' })\r\n      const url = URL.createObjectURL(blob)\r\n\r\n      // 获取文件名称\r\n      const now = new Date();\r\n      const year = now.getFullYear();\r\n      const month = String(now.getMonth() + 1).padStart(2, '0'); // 月份从 0 开始\r\n      const day = String(now.getDate()).padStart(2, '0');\r\n      const hour = String(now.getHours()).padStart(2, '0');\r\n      const minute = String(now.getMinutes()).padStart(2, '0');\r\n      const second = String(now.getSeconds()).padStart(2, '0');\r\n      const downloadFileName = `subtitles-${year}${month}${day}-${hour}${minute}${second}.srt`;\r\n\r\n      const a = document.createElement('a')\r\n      a.href = url\r\n      a.download = downloadFileName;\r\n      a.click()\r\n\r\n      URL.revokeObjectURL(url)\r\n    };\r\n\r\n    return {\r\n      fileInput,\r\n      File,\r\n      isProcessing,\r\n      original_subtitles,\r\n      translated_subtitles,\r\n      isTranslated,\r\n      triggerFileUpload,\r\n      handleFileChange,\r\n      readSubtitleFile,\r\n      handleDrop,\r\n      startProcessing,\r\n      convertToSRT,\r\n      downloadSRT,\r\n    };\r\n    // 这表示：你希望这些变量和方法可以在 <template> 中被访问和使用。\r\n    // 实际上你使用script setup 时，所有在 setup 函数中定义的变量和方法都会自动暴露到模板中。\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n/* Title */\r\n.tight-title {\r\n  margin: 10px 0;\r\n  line-height: 1;\r\n}\r\n\r\n/* Global Styling */\r\n:root {\r\n  --primary-color: #4A90E2;\r\n  --secondary-color: #50E3C2;\r\n  --background-color: #f4f7f9;\r\n  --text-color: #333;\r\n  --border-color: #dbe2e8;\r\n  --card-bg-color: #ffffff;\r\n  --font-family: 'Helvetica Neue', Arial, sans-serif;\r\n}\r\n\r\nbody {\r\n  font-family: var(--font-family);\r\n  background-color: var(--background-color);\r\n  color: var(--text-color);\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n#app-container {\r\n  max-width: 1400px;\r\n  margin: 0 auto;\r\n  padding: 2rem;\r\n}\r\n\r\n/* Header */\r\n.app-header {\r\n  text-align: center;\r\n  margin-bottom: 2.5rem;\r\n  border-bottom: 1px solid var(--border-color);\r\n  padding-bottom: 1.5rem;\r\n}\r\n\r\n.app-header h1 {\r\n  font-size: 2.5rem;\r\n  color: var(--primary-color);\r\n  margin: 0;\r\n}\r\n\r\n.app-header .subtitle {\r\n  font-size: 1rem;\r\n  color: #777;\r\n  margin-top: 0.5rem;\r\n}\r\n\r\n/* Main Content Layout */\r\n.main-content {\r\n  display: flex;\r\n  gap: 2rem;\r\n  flex-wrap: stretch;\r\n}\r\n\r\n.upload-section, .display-section {\r\n  background-color: var(--card-bg-color);\r\n  border-radius: 12px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);\r\n  padding: 2rem;\r\n}\r\n\r\n.upload-section {\r\n  flex: 1;\r\n  min-width: 350px;\r\n  flex-direction: column;\r\n}\r\n\r\n.display-section {\r\n  flex: 2;\r\n  min-width: 600px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n}\r\n\r\n/* Upload Box */\r\n.upload-box {\r\n  border: 2px dashed var(--border-color);\r\n  border-radius: 10px;\r\n  padding: 2rem;\r\n  text-align: center;\r\n  transition: all 0.3s ease;\r\n  height: stretch;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n}\r\n\r\n.upload-box:hover {\r\n  border-color: var(--primary-color);\r\n  background-color: #f9fcff;\r\n}\r\n\r\n.upload-icon {\r\n  color: var(--primary-color);\r\n  margin-bottom: 1rem;\r\n}\r\n\r\n.upload-button {\r\n  background-color: var(--primary-color);\r\n  color: white;\r\n  border: none;\r\n  padding: 0.8rem 1.5rem;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  font-size: 1rem;\r\n  font-weight: 500;\r\n  transition: background-color 0.3s ease;\r\n  margin: 1rem 0;\r\n}\r\n\r\n.upload-button:hover {\r\n  background-color: #357abd;\r\n}\r\n\r\n.file-info {\r\n  color: #888;\r\n  font-size: 0.85rem;\r\n}\r\n\r\n.file-details p {\r\n    word-break: break-all;\r\n    background-color: #f0f0f0;\r\n    padding: 0.5rem;\r\n    border-radius: 5px;\r\n}\r\n\r\n.process-button {\r\n    background-color: var(--secondary-color);\r\n    color: white;\r\n    border: none;\r\n    padding: 0.8rem 2rem;\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n    font-size: 1rem;\r\n    font-weight: 500;\r\n    transition: background-color 0.3s ease;\r\n    margin-top: 1rem;\r\n}\r\n\r\n.process-button:disabled {\r\n    background-color: #ccc;\r\n    cursor: not-allowed;\r\n}\r\n\r\n/* Display Section */\r\n.video-player-container, .subtitle-display-container {\r\n  width: 100%;\r\n}\r\n\r\n.video-player {\r\n  width: 100%;\r\n  border-radius: 8px;\r\n  background-color: #000;\r\n}\r\n\r\n.video-placeholder {\r\n  width: 100%;\r\n  height: 350px;\r\n  background-color: #e9ecef;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  color: #6c757d;\r\n}\r\n\r\n.subtitle-area {\r\n  height: 300px;\r\n  overflow-y: auto;\r\n  border: 1px solid var(--border-color);\r\n  border-radius: 8px;\r\n  padding: 1rem;\r\n  background-color: #f8f9fa;\r\n}\r\n\r\n.subtitle-placeholder {\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  height: 100%;\r\n  color: #888;\r\n}\r\n\r\n.subtitle-list {\r\n  list-style-type: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n\r\n.subtitle-item {\r\n  margin-bottom: 1.2rem;\r\n  padding-bottom: 1rem;\r\n  border-bottom: 1px solid #e0e0e0;\r\n}\r\n.subtitle-item:last-child {\r\n    border-bottom: none;\r\n}\r\n\r\n.timestamp {\r\n  font-size: 0.8rem;\r\n  color: #666;\r\n  font-family: monospace;\r\n  margin-bottom: 0.4rem;\r\n  display: block;\r\n}\r\n\r\n.text-original {\r\n  font-size: 1rem;\r\n  color: #333;\r\n  margin: 0 0 0.3rem 0;\r\n}\r\n\r\n.text-translated {\r\n  font-size: 1rem;\r\n  color: var(--primary-color);\r\n  font-weight: 500;\r\n  margin: 0;\r\n}\r\n\r\n</style>"],"mappings":";;;;;;;AAgFA,SAASA,SAAQ,QAAS,cAAc;AACxC,SAASC,GAAE,QAAS,KAAK;AAEzB,eAAeC,SAASA,CAAA,EAAG;EACzB,IAAI;IACF,MAAMC,GAAE,GAAI,MAAMC,KAAK,CAAC,mCAAmC,CAAC;IAC5D,MAAMC,IAAG,GAAI,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;IAC7BC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEH,IAAI,CAACI,EAAE,CAAC;IAC9B,OAAOJ,IAAI,CAACI,EAAE;EAChB,EAAE,OAAOC,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACjC,OAAO,IAAI;EACb;AACF;AAEA,eAAe;EACbC,IAAI,EAAE,KAAK;EACXC,KAAKA,CAAA,EAAG;IACN,MAAMC,SAAQ,GAAIZ,GAAG,CAAC,IAAI,CAAC;IAC3B,MAAMa,IAAG,GAAIb,GAAG,CAAC,IAAI,CAAC;IACtB,MAAMc,YAAW,GAAId,GAAG,CAAC,KAAK,CAAC;IAC/B,MAAMe,YAAW,GAAIf,GAAG,CAAC,KAAK,CAAC;;IAE/B;IACA,MAAMgB,kBAAiB,GAAIhB,GAAG,CAAC;MAC7B;MACA;IAAA,CACD,CAAC;IACF,MAAMiB,oBAAmB,GAAIjB,GAAG,CAAC;MAC/B;MACA;MACA;IAAA,CACD,CAAC;;IAEF;;;IAGA,MAAMkB,iBAAgB,GAAIA,CAAA,KAAM;MAC9BN,SAAS,CAACO,KAAK,CAACC,KAAK,CAAC,CAAC;IACzB,CAAC;IAED,MAAMC,UAAS,GAAKC,KAAK,IAAK;MAC5B,MAAMC,IAAG,GAAID,KAAK,CAACE,YAAY,CAACC,KAAK,CAAC,CAAC,CAAC;MACxC,MAAMC,QAAO,GAAIH,IAAI,CAACb,IAAI,CAACiB,WAAW,CAAC,CAAC;MACxC,IAAIJ,IAAG,KAAMG,QAAQ,CAACE,QAAQ,CAAC,MAAM,KAAKF,QAAQ,CAACE,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE;QACpEf,IAAI,CAACM,KAAI,GAAII,IAAI;QACjBM,gBAAgB,CAACN,IAAI,CAAC,EAAE;MAC1B,OAAO;QACLxB,SAAS,CAAC+B,OAAO,CAAC,kBAAkB,CAAC;MACvC;IACF,CAAC;IAED,MAAMC,gBAAe,GAAKT,KAAK,IAAK;MAClC,MAAMC,IAAG,GAAID,KAAK,CAACU,MAAM,CAACP,KAAK,CAAC,CAAC,CAAC;MAClC,IAAI,CAACF,IAAI,EAAE;MAEX,MAAMG,QAAO,GAAIH,IAAI,CAACb,IAAI,CAACiB,WAAW,CAAC,CAAC;MACxC,IAAID,QAAQ,CAACE,QAAQ,CAAC,MAAM,KAAKF,QAAQ,CAACE,QAAQ,CAAC,MAAM,CAAC,EAAC;QACzDf,IAAI,CAACM,KAAI,GAAII,IAAI;QACjBM,gBAAgB,CAACN,IAAI,CAAC,EAAE;MAC1B,OAAO;QACLxB,SAAS,CAAC+B,OAAO,CAAC,4BAA4B,CAAC;MACjD;IACF,CAAC;;IAED;;;IAGA,MAAMD,gBAAe,GAAKN,IAAI,IAAK;MACjC,MAAMU,MAAK,GAAI,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,MAAK,GAAI,MAAM;QAClB,MAAMC,OAAM,GAAIH,MAAM,CAACI,MAAM;QAC7BrB,kBAAkB,CAACG,KAAI,GAAImB,QAAQ,CAACF,OAAO,CAAC,EAAE;MAClD,CAAC;MACDH,MAAM,CAACM,UAAU,CAAChB,IAAI,CAAC;IACzB,CAAC;IAED,MAAMe,QAAO,GAAKE,IAAI,IAAK;MACzB;MACA,IAAIA,IAAI,CAACC,UAAU,CAAC,CAAC,MAAM,MAAM,EAAE;QACjCD,IAAG,GAAIA,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC;MACtB;;MAEA;MACA,MAAMC,cAAa,GAAIH,IAAI,CAACI,OAAO,CAAC,UAAU,EAAE,IAAI,CAAC;MACrD;MACA,MAAMC,KAAI,GAAIF,cAAc,CAACG,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,CAACF,IAAG,IAAKA,IAAG,KAAM,EAAE,CAAC;MAE7F,MAAMG,SAAQ,GAAI,EAAE;MACpB,IAAIC,CAAA,GAAI,CAAC;MAET,OAAOA,CAAA,GAAIP,KAAK,CAACQ,MAAM,EAAE;QACvB;QACA,IAAI,OAAO,CAACC,IAAI,CAACT,KAAK,CAACO,CAAC,CAAC,CAAC,EAAE;UAC1B,MAAMG,KAAI,GAAIV,KAAK,CAACO,CAAC,CAAC;UACtB,MAAMI,SAAQ,GAAIX,KAAK,CAACO,CAAA,GAAI,CAAC,CAAC;;UAE9B;UACA,IAAI,MAAM,CAACE,IAAI,CAACE,SAAS,CAAC,EAAE;YAC1B,IAAIC,YAAW,GAAI,EAAE;YACrB,IAAIC,CAAA,GAAIN,CAAA,GAAI,CAAC;;YAEb;YACA,OAAOM,CAAA,GAAIb,KAAK,CAACQ,MAAK,IAAK,CAAC,OAAO,CAACC,IAAI,CAACT,KAAK,CAACa,CAAC,CAAC,CAAC,EAAE;cAClDD,YAAY,CAACE,IAAI,CAACd,KAAK,CAACa,CAAC,CAAC,CAAC;cAC3BA,CAAC,EAAE;YACL;YAEA,MAAME,QAAO,GAAIH,YAAY,CAAC,CAAC,KAAK,EAAE;YACtC,MAAMI,UAAS,GAAIJ,YAAY,CAAC,CAAC,KAAK,EAAE;YAExCN,SAAS,CAACQ,IAAI,CAAC;cACbJ,KAAK;cACLC,SAAS;cACTI,QAAQ;cACRC,UAAU;cACVC,UAAU,EAAEL,YAAW,CAAE;YAC3B,CAAC,CAAC;YAEFL,CAAA,GAAIM,CAAC,EAAE;UACT,OAAO;YACLN,CAAC,EAAE,EAAE;UACP;QACF,OAAO;UACLA,CAAC,EAAE,EAAE;QACP;MACF;MAEA,OAAOD,SAAS;IAClB,CAAC;;IAED;;;IAGA,MAAMY,eAAc,GAAIA,CAAA,KAAM;MAC5B,IAAI,CAAClD,IAAI,CAACM,KAAK,EAAE;QACfpB,SAAS,CAAC+B,OAAO,CAAC,WAAW,CAAC;QAC9B;MACF;MACAhB,YAAY,CAACK,KAAI,GAAI,IAAI;MACzBb,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEM,IAAI,CAACM,KAAK,CAACT,IAAI,CAAC;;MAEvC;MACAT,SAAS,CAAC,CAAC,CAAC+D,IAAI,CAACxD,EAAC,IAAK;QACrB,MAAMyD,GAAE,GAAI,IAAIC,IAAI,CAAC,CAAC;QACtB,MAAMV,SAAQ,GAAIS,GAAG,CAACE,cAAc,CAAC,IAAI,CAAC,CAACvB,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;QAC9E,MAAMwB,SAAQ,GAAI,YAAY5D,EAAE,IAAIgD,SAAS,EAAE;QAC/ClD,OAAO,CAACC,GAAG,CAAC,MAAM,EAAE6D,SAAS,CAAC;MAChC,CAAC,CAAC;;MAGF;MACA;MACA;MACA;MACA;;MAEA;MACAC,UAAU,CAAC,MAAM;QACfpD,oBAAoB,CAACE,KAAI,GAAI,CAC3B;UAAEqC,SAAS,EAAE,+BAA+B;UAAEI,QAAQ,EAAE,KAAK;UAAEC,UAAU,EAAE;QAAS,CAAC,EACrF;UAAEL,SAAS,EAAE,+BAA+B;UAAEI,QAAQ,EAAE,SAAS;UAAEC,UAAU,EAAE;QAA8B,CAAC,EAC9G;UAAEL,SAAS,EAAE,+BAA+B;UAAEI,QAAQ,EAAE,SAAS;UAAEC,UAAU,EAAE;QAAwB,CAAC,EACxG;UAAEL,SAAS,EAAE,+BAA+B;UAAEI,QAAQ,EAAE,KAAK;UAAEC,UAAU,EAAE;QAAW,CAAC,EACvF;UAAEL,SAAS,EAAE,+BAA+B;UAAEI,QAAQ,EAAE,KAAK;UAAEC,UAAU,EAAE;QAAU,CAAC,CACvF;QACD/C,YAAY,CAACK,KAAI,GAAI,KAAK;QAC1BJ,YAAY,CAACI,KAAI,GAAI,IAAI;QACzBpB,SAAS,CAACuE,OAAO,CAAC,MAAM,CAAC;MAC3B,CAAC,EAAE,IAAI,CAAC,EAAE;IACZ,CAAC;IAED,MAAMC,YAAW,GAAKC,cAAc,IAAK;MACvC,OAAOA,cAAc,CAACzB,GAAG,CAAC,CAAC0B,IAAI,EAAElB,KAAK,KAAK;QACzC,OAAO,GAAGA,KAAI,GAAI,CAAC;AAC3B,EAAEkB,IAAI,CAACjB,SAAS;AAChB,EAAEiB,IAAI,CAACb,QAAQ;AACf,EAAEa,IAAI,CAACZ,UAAU;AACjB,GAAE;MACI,CAAC,CAAC,CAACa,IAAI,CAAC,EAAE;IACZ,CAAC;IAED,MAAMC,WAAU,GAAIA,CAAA,KAAM;MACxB,MAAMC,UAAS,GAAIL,YAAY,CAACtD,oBAAoB,CAACE,KAAK;MAC1D,MAAM0D,IAAG,GAAI,IAAIC,IAAI,CAAC,CAACF,UAAU,CAAC,EAAE;QAAEG,IAAI,EAAE;MAA+B,CAAC;MAC5E,MAAMC,GAAE,GAAIC,GAAG,CAACC,eAAe,CAACL,IAAI;;MAEpC;MACA,MAAMZ,GAAE,GAAI,IAAIC,IAAI,CAAC,CAAC;MACtB,MAAMiB,IAAG,GAAIlB,GAAG,CAACmB,WAAW,CAAC,CAAC;MAC9B,MAAMC,KAAI,GAAIC,MAAM,CAACrB,GAAG,CAACsB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;MAC3D,MAAMC,GAAE,GAAIH,MAAM,CAACrB,GAAG,CAACyB,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAClD,MAAMG,IAAG,GAAIL,MAAM,CAACrB,GAAG,CAAC2B,QAAQ,CAAC,CAAC,CAAC,CAACJ,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACpD,MAAMK,MAAK,GAAIP,MAAM,CAACrB,GAAG,CAAC6B,UAAU,CAAC,CAAC,CAAC,CAACN,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACxD,MAAMO,MAAK,GAAIT,MAAM,CAACrB,GAAG,CAAC+B,UAAU,CAAC,CAAC,CAAC,CAACR,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MACxD,MAAMS,gBAAe,GAAI,aAAad,IAAI,GAAGE,KAAK,GAAGI,GAAG,IAAIE,IAAI,GAAGE,MAAM,GAAGE,MAAM,MAAM;MAExF,MAAMG,CAAA,GAAIC,QAAQ,CAACC,aAAa,CAAC,GAAG;MACpCF,CAAC,CAACG,IAAG,GAAIrB,GAAE;MACXkB,CAAC,CAACI,QAAO,GAAIL,gBAAgB;MAC7BC,CAAC,CAAC9E,KAAK,CAAC;MAER6D,GAAG,CAACsB,eAAe,CAACvB,GAAG;IACzB,CAAC;IAED,OAAO;MACLpE,SAAS;MACTC,IAAI;MACJC,YAAY;MACZE,kBAAkB;MAClBC,oBAAoB;MACpBF,YAAY;MACZG,iBAAiB;MACjBa,gBAAgB;MAChBF,gBAAgB;MAChBR,UAAU;MACV0C,eAAe;MACfQ,YAAY;MACZI;IACF,CAAC;IACD;IACA;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}